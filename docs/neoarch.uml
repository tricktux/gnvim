
@startuml

set namespaceSeparator ::

interface nvim::IoDevice {
	+virtual int start(args);
	+virtual int stop(args);
	+virtual size_t write(string_view)
	+virtual size_t read(ptrdata, size)
}

class nvim::ReprocDevice {
	-reproc::process process;
	' -std::mutex m;
	' -std::string output;
	' -std::future<std::error_code> drain_async;

	' +int spawn(char **argv)
	' +int kill()
}

' class nvim::StreamDecoder {
	' -mpack_tree_t tree;
	' -static size_t read_iodev(mpack_tree_t *ptree, char *buf, size_t count)

	' +std::optional<mpack_node_t> poll()
' }

interface nvim::IStreamWorker {
	-std::mutex qm;
	-std::condition_variable cv;
	' -std::queue<mpack_node_t> nodes;
	-std::vector<uint8_t> raw_data;
	-std::thread t;
	-IoDevice &dev; ' Used to read data
	-void wait_for_data() ' simulates `reproc::drain`
	-void push(data);

	+std::optional<std::vector<uint8_t>> poll();
}

class nvim::Api {
	-msgid = 0;
	-IoDevice &dev; ' Used to send data in dispatch function
	-IStreamWorker worker;
	' Uses worker to wait for a mpack_node_t
	-auto poll(msgid, timeout);
	-dispatch(const std::string& func, Args... args)
	+int get_new_msgid() { return ++msgid; }
	' This function basically calls dispatch and then poll
	+auto generated_functions_from_api()
	' Todo
	+virtual auto generated_notifications_handles()
}

interface msgpack::INotifUnpack {
	' TODO in this function check the msg type to ensure its a notification type
	+int set_data(string);
	+int get_method_name();
	+T get_params();
}

class msgpack::NotifUnpack {
	-mpack_node_t nodes;
}

msgpack::INotifUnpack <|-- msgpack::NotifUnpack 

interface msgpack::IResUnpack {
	-T mpack_read();

	' TODO in this function check the msg type to ensure its a response type
	+int set_data(string);
	+int get_msgid();
	+int get_error();
	+T get_result();
}
class msgpack::ResUnpack {
	-mpack_node_t nodes;
	' -T mpack_write();

	' TODO in this function check the msg type to ensure its a response type
	' +int set_data(string);
	' +int get_msgid();
	' +int get_error();
	' +T get_result();
	' On destruction call
	'mpack_reader_destroy, see its help
}

msgpack::IResUnpack <|-- msgpack::ResUnpack

interface msgpack::IReqPack {
	-char *data;
	-size_t data_size;

	+virtual void set_msgid(int);
	+virtual void set_funcname(string);
	+virtual void set_args(Args... args);
	+virtual string pack();
}

' TODO Call MPACK_FREE(data) on destructor
class msgpack::ReqPack {
	' -char *data;
	' -size_t data_size;
	-mpack_writer_t writer;
	-void mpack_write();

	' +virtual void set_msgid(int);
	' +virtual void set_funcname(string);
	' +virtual void set_args(Args... args);
	' +virtual string build();
}

msgpack::IReqPack <|-- msgpack::ReqPack

' enum nvimrpc::MessageType: <int64_t> {
	' REQUEST = 0,
	' RESPONSE = 1,
	' NOTIFICATION = 2
' }

' class nvimrpc::Types {
	' using object = std::variant<
		' bool,
		' int64_t,
		' double,
		' std::string,
		' std::vector<libnvc::object_wrapper>,
		' std::unordered_map<std::string, libnvc::object_wrapper>
		' >;
' }

nvim::Api *-- nvim::IStreamWorker
nvim::Api *-left- nvim::IoDevice
nvim::IoDevice <|-- nvim::ReprocDevice
nvim::IStreamWorker *-- nvim::IoDevice

@enduml
